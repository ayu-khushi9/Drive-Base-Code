package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@Autonomous(name="First Auto")
public class AutonomousOpMode extends LinearOpMode {
    @Override
    public void runOpMode() throws InterruptedException {
        // Declare our motors
        // Make sure your ID's match your configuration
        DcMotor motorFrontLeft = hardwareMap.dcMotor.get("motorFrontL");
        DcMotor motorBackLeft = hardwareMap.dcMotor.get("motorBackL");
        DcMotor motorFrontRight = hardwareMap.dcMotor.get("motorFrontR");
        DcMotor motorBackRight = hardwareMap.dcMotor.get("motorBackR");

        // Reverse the right side motors
        // Reverse left motors if you are using NeveRests
        motorFrontRight.setDirection(DcMotorSimple.Direction.REVERSE);
        motorBackRight.setDirection(DcMotorSimple.Direction.REVERSE);


        waitForStart();
        
        LeftTime(1, 2000);
}
     public void DriveForward(double power){
        motorFrontLeft.setPower(power);
        motorFrontRight.setPower(power);
        motorBackRight.setpower(power);
        motorBackLeft.setpower(power);
     }
     public void DriveForwardTime(double power, long time) throws InterruptedException{
        DriveForward(power);
        Thread.sleep(time);
        
     }
     public void TurnLeft(double power){
         motorFrontRight.setPower(power);
         motorBackLeft.setpower(power);
     }
     public void TurnLeftTime(doube power, long time) throws InterruptedException{
        TurnLeft(power);
        Thread.sleep(time);
     
     }
    public void TurnRight(double power){
        motorFrontLeftPower(power);
        motorBackRight.setpower(power);
    }
     public void TurnRightTime(double power, long time) throws InterruptedException{
        TurnRight(power);
        Thread.sleep(time);
     
     }
    public void Left(double power){
        motorFrontRight.setPower(power);
        motorBackLeft.setpower(power);
        motorFrontLeftPower(-power);
        motorBackRight.setpower(-power);
     }
     public void Lefttime(double power, long time) throws InterruptedException{
        Left(power);
        Thread.sleep(time);
     }
     public void Right(double power){
        motorFrontRight.setPower(-power)
        motorBackLeft.setpower(-power);
        motorFrontLeftPower(power);
        motorBackRight.setpower(power);
     }
       public void RightTime(double power, long time) throws InterruptedException{
        Right(power);
        Thread.sleep(time);
     }
    
}
